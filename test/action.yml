---
name: Test Python
description: |
  Github Action to Build & Test Python

  RequiredEnv:
    GITHUB_TOKEN
    SONAR_TOKEN
inputs:
  python-version:
    description: |
      The python-version input is optional.
      If not supplied, the action will try to resolve the
      version from the default `.python-version` file.

      If the `.python-version` file doesn't exist Python or PyPy
      version from the PATH will be used.

      The default version of Python or PyPy in PATH varies
      between runners and can be changed unexpectedly
      so we recommend always setting Python version explicitly
      using the python-version inputs.
    required: false
  sonar_wait_flag:
    description: Says if Sonar has to wait for analysis
    required: false
runs:
  using: composite
  steps:
    - name: Find Python Packager
      id: packager
      shell: bash
      run: |
        echo "packager=pip" >> $GITHUB_OUTPUT
        if [ -f "Pipfile.lock" ]; then
            echo "PIPENV_VENV_IN_PROJECT=1" >> $GITHUB_ENV
            echo "packager=pipenv" >> $GITHUB_OUTPUT
        fi
        if [ -f "poetry.lock" ]; then
            pipx install poetry
            echo "packager=poetry" >> $GITHUB_OUTPUT
        fi

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ inputs.python-version }}
        cache: ${{ steps.packager.outputs.packager }}

    - name: Install or Upgrade Packages for Build Setup
      shell: bash
      env:
        PYTHON_PACKAGER: ${{ steps.packager.outputs.packager }}
      run: |
        # echo "::group::Install Packages"
        if [ "$PYTHON_PACKAGER" == "pipenv" ]; then
          curl \
            https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py \
            | python
        fi
        pip install --upgrade --no-cache-dir \
          wheel pip pytest coverage
        # echo "::endgroup::"
    - name: Run pre_test.sh
      shell: bash
      run: |
        pretest_cmd="echo 'NO_PRETEST'"
        if [ -f ".github/actions/pre_test.sh" ]; then
            pretest_cmd="$(cat .github/actions/pre_test.sh)"
        fi
        echo "pretest_cmd: $pretest_cmd"
        sh -c "${pretest_cmd}"

    - name: Install Application Python Packages
      shell: bash
      env:
        PYTHON_PACKAGER: ${{ steps.packager.outputs.packager }}
      run: |
        # echo "::group::Install Python Packages"
        if [ "$PYTHON_PACKAGER" == "pipenv" ]; then
            mkdir -p ./.venv
            pipenv sync --dev
        fi
        if [ "$PYTHON_PACKAGER" == "pip" ]; then
            pip install -r requirements.txt
        fi
        if [ "$PYTHON_PACKAGER" == "poetry" ]; then
            poetry install --all-groups
        fi
        # echo "::endgroup::"

    - name: Test with pytest
      shell: bash
      env:
        PYTHON_PACKAGER: ${{ steps.packager.outputs.packager }}
      run: |
        runner=""
        if [ "$PYTHON_PACKAGER" == "poetry" ]; then
            runner="poetry run "
        fi
        if [ "$PYTHON_PACKAGER" == "pipenv" ]; then
            runner="pipenv run "
        fi
        echo "::group::Test with pytest"
        eval "${runner}coverage run -m pytest"
        echo "::endgroup::"

    - name: Collect Coverage Results
      shell: bash
      run: |
        echo "::group::Collect Coverage Results"
        coverage xml -i -o coverage.xml
        coverage html -i -d coverage-html
        echo "::endgroup::"

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      if: env.ENABLE_SONAR == 'true'
      with:
        args: >
          -Dsonar.qualitygate.wait=${{ inputs.sonar_wait_flag }}
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
          -Dsonar.organization=${{ env.SONAR_ORG }}
          -Dsonar.python.coverage.reportPaths=coverage.xml

    - name: Add Coverage to Summary
      if: env.ENABLE_SONAR != 'true'
      shell: bash
      run: |
        echo "## ðŸ“Š Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        coverage report >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Upload HTML Coverage Report
      if: env.ENABLE_SONAR != 'true'
      uses: actions/upload-artifact@v5
      with:
        name: coverage-report
        path: |
          coverage-html/
          coverage.xml
        retention-days: 30
